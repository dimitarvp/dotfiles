source ~/.zsh/p10k.zsh
source ~/.zsh/ohmyzsh.zsh
source ~/.zsh/zsh.zsh # always put history opts after `oh-my-zsh` init or it will override this file.
source ~/.zsh/zplug.zsh
source ~/.zsh/fzy.zsh
source ~/.zsh/autocomplete.zsh
source ~/.zsh/aliases.zsh
source ~/.zsh/git.zsh
source ~/.zsh/gnu.zsh

source ~/.zsh/erlang.zsh
source ~/.zsh/elixir.zsh
source ~/.zsh/java.zsh

export PATH=$PATH:$HOME/OneDrive/vrobot.programs # Cloud-synced scripts
export PATH=/usr/local/opt/ruby/bin:$PATH # Ruby
export PATH=$HOME/.local/bin:$PATH # Programs installed through package managers
export PATH=$PATH:$HOME/bin # Programs installed outside package managers
export PATH=$PATH:$HOME/scripts # Local scripts
export PATH=/usr/local/sbin:$PATH # where Homebrew puts globally available binaries

# PSPG default command line options
export PSPG="--style 16 --force-uniborder --bold-labels --highlight-odd-rec --border 2 --no-sound"

# --------------------------------------------------
# FUZZY FINDER: fzf
export FZF_DEFAULT_OPTS='--inline-info'

export FZF_DEFAULT_COMMAND='fd -t f --strip-cwd-prefix'

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

export FZF_CTRL_T_OPTS="
  --height 100%
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:3:hidden:wrap
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"

# NOTE: on macOS this is actually ESC-c and not ALT-c
export FZF_ALT_C_COMMAND='fd -t d'
export FZF_ALT_C_OPTS="--preview 'tree -C {}'"

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
    export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview 'bat -n --color=always {}' "$@" ;;
  esac
}
# --------------------------------------------------

# --------------------------------------------------
# FUZZY FINDER: peco
# ZSH widgets for invoking Peco (fuzzy finder) and their keybinds
# peco_find_file() {
#     local selected_path
#     selected_path=$(fd -t f | peco --prompt 'FILE>') || return
#     eval 'LBUFFER="$LBUFFER$selected_path"'
# }
# zle -N peco_find_file
# bindkey '^T' peco_find_file

# peco_find_dir() {
#     local selected_path
#     selected_path=$(fd -t d | peco --prompt 'DIR>') || return
#     eval 'LBUFFER="$LBUFFER$selected_path"'
# }
# zle -N peco_find_dir
# bindkey '^Y' peco_find_dir

# peco_find_pid() {
#     local selected_pid
#     selected_pid=$(ps axww -o pid,user,%cpu,%mem,start,time,command | peco --prompt 'PROCESS>' | sed 's/^ *//' | cut -f1 -d' ') || return
#     eval 'LBUFFER="$LBUFFER$selected_pid"'
# }
# zle -N peco_find_pid
# bindkey '^P' peco_find_pid

# peco_find_history() {
#     local selected_entry
#     selected_entry=$(fc -l -n -r 1 | peco --prompt 'HISTORY>')
#     eval 'LBUFFER="$LBUFFER$selected_entry"'
# }
# zle -N peco_find_history
# bindkey '^R' peco_find_history

peco_find_git_uncommitted() {
    local selected_entry
    selected_entry=$(git status --porcelain | peco --prompt 'GIT>' | awk '{print $2}')
    eval 'LBUFFER="$LBUFFER$selected_entry"'
}
zle -N peco_find_git_uncommitted
bindkey '^U' peco_find_git_uncommitted
# --------------------------------------------------

# --------------------------------------------------
# FUZZY FINDER: skim
export SKIM_DEFAULT_COMMAND='fd -t f || git ls-tree -r --name-only HEAD || rg --files || find .'
# --------------------------------------------------

# Go: installed binaries.
export PATH="$HOME/go/bin:$PATH"

# ----------------------------------------
# Rust
#
export PATH="$HOME/.cargo/bin:$PATH"

# Accelerate Rust's autocomplete daemon by pointing it at Rust's sources.
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library"

# Use well-known location for `sccache` storage.
export SCCACHE_DIR=~/.cache/sccache

# Utilize `sccache` when compiling Rust.
export RUSTC_WRAPPER=`which sccache`

# Taken from https://github.com/messense/homebrew-macos-cross-toolchains
export CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gcc
export CXX_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-g++
export AR_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-ar
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc
# ----------------------------------------

# curl: prioritise the version installed from `homebrew`.
export PATH="/usr/local/opt/curl/bin:$PATH"

# mysql client: prioritise the version installed from `homebrew`.
export PATH="/usr/local/opt/mysql-client/bin:$PATH"

# V language.
export PATH="$HOME/bin/v:$PATH"

# Tabulator shell scripts.
export PATH="$PATH:$HOME/bin/tabulator/bin"

# YTFZF: Specify cache directory.
YTFZF_CACHE=~/.cache/ytfzf

# YTFZF: Always choose best video and audio qualities.
export YTFZF_PREF="bestvideo[height<=?1080]+bestaudio/best"

# Decode JTW tokens on the command line.
jwtd() {
    if [[ -x $(command -v jq) ]]; then
        jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
        echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
    fi
}

# opam configuration
test -r /Users/dimi/.opam/opam-init/init.sh && . /Users/dimi/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

# direnv hook; must always be the last in the config.
eval "$(direnv hook zsh)"

. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

source /Users/dimi/Library/Preferences/org.dystroy.broot/launcher/bash/br

# Fuzzy `cd` finder
#. /usr/local/etc/profile.d/z.sh
#eval "$(zoxide init zsh)"

# Python 3.8
export PATH="/usr/local/opt/python@3.8/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/python@3.8/lib"
export PKG_CONFIG_PATH="/usr/local/opt/python@3.8/lib/pkgconfig"

ulimit -n 98304

export PATH="/usr/local/opt/sqlite/bin:$PATH"

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh

fpath+=${ZDOTDIR:-$HOME}/.zsh_functions

# Allow `parallel` to inherit environment variables from current shell.
#. `which env_parallel.zsh`

# Setup variables and scripts for local backup.
source $HOME/scripts/dimi_backup_setup

# Uncomment this to enable `fzf` completion when pressing TAB.
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# --------------------------------------------------
# BEGIN `fzf-tab` settings

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

# END `fzf-tab` settings
# --------------------------------------------------

function lll {
  cd "$(llama "$@")"
}

# Enable Docker BuildKit.
export DOCKER_BUILDKIT=1

export NVIM_LSP_LOG=$HOME/.cache/nvim/lsp.log
export LVIM_LSP_LOG=$HOME/.cache/lvim/lsp.log

# Emacs-friendly LIBRARY_PATH
# NOTE: this does not help and that's why it's commented out. The symlink below does the job.
export LIBRARY_PATH=/usr/local/opt/gcc@12/lib/gcc/12:/usr/local/opt/libgccjit/lib/gcc/current:/usr/local/opt/gcc@12/lib/gcc/12/gcc/x86_64-apple-darwin21/12

# Also make sure to ALWAYS have this symlinked because Emacs expects the library `/usr/local/lib/libgccjit.0.dylib` to exist.
# sudo ln -s -v /usr/local/opt/libgccjit/lib/gcc/current/libgccjit.0.dylib /usr/local/lib/ 

source '/Users/dimi/Library/Application Support/org.dystroy.broot/launcher/bash/br'

export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# https://github.com/tversteeg/emplace
eval "$(emplace init zsh)"
